const AWS = require('aws-sdk');
const APIGATEWAY = new AWS.APIGateway({ apiVersion: '2015/07/09' });

const init = (_awsConfig) => {
    console.log("INITIATING AWS CONFIG FOR KEYS - ", Object.keys(_awsConfig));
    AWS.config.update(_awsConfig);
}

/**
 * @name createRestAPIEntity
 * @description Create REST API Entity - Create REST API Entity - Mostly you won't use this.
 * @return {object} entity - The Entity Response from AWS SDK
 */
const createRestAPIEntity = async ({ name, description, version }) => {
    try {
        const res = await APIGATEWAY.createRestApi({
            name, 
            description,
            version,
            binaryMediaTypes: [
                '*'
            ],
        }).promise();
        return {
            success: true,
            data: res
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}

/**
 * @name deleteRestAPIEntity
 * @description Delete REST API Entity - Create REST API Entity - Mostly you won't use this, this will be used for rollbacks.
 * @param {string} restApiId - Rest API ID
 * @return {object} entity - The Entity Response from AWS SDK
 */
const deleteRestAPIEntity = async (restApiId) => {
    try {
        const res = await APIGATEWAY.deleteRestApi({
            restApiId
        }).promise();
        return {
            success: true,
            data: res
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}

/**
 * @name getRestAPIResources
 * @description Get REST API Entity Resource for a Entity.
 * @return {object} resources - Resources for a particular REST API (ALL APIS AVAILABLE).
 */
const getRestAPIResources = async ({ restApiId, limit = 50 }) => {
    try {
        const res = await APIGATEWAY.getResources({
            restApiId,
            limit // Keep limit in concern to handle data safely without timeout issues.
        }).promise();
        return {
            success: true,
            data: res
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}

/**
 * @name createRestAPIResource
 * @description Setup Base API Endpoint - Recursive Strategy
 * @return {object} resource - The resource Response for a Particular Path
 */
const createRestAPIResource = async ({ restApiId, parentId, pathPart }) => {
    try {
        const res = await APIGATEWAY.createResource({
            restApiId,
            parentId,
            pathPart
        }).promise();
        return {
            success: true,
            data: res
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}

/**
 * @name deleteRestAPIResource
 * @description Delete a REST API Resource
 * @return {object} Delete Resource
 */
const deleteRestAPIResource = async ({ restApiId, resourceId }) => {
    try {
        const res = await APIGATEWAY.deleteResource({
            restApiId,
            resourceId
        }).promise();
        return {
            success: true,
            data: res
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}


/**
 * @name addPutMethod
 * @description Setup Method for API Endpoint
 * @param {string} restApiId - Rest API ID
 * @param {string} resourceId - Rest API Resource ID
 * @param {string} httpMethod - HTTP Method (GET, POST, PUT)
 * @return {object} resource - The api formation response for a particular resource.
 */
const addPutMethod = async (restApiId, resourceId, httpMethod) => {
    try {
        const resource = await APIGATEWAY.putMethod({
            restApiId,
            resourceId,
            httpMethod: httpMethod.toUpperCase(),
            authorizationType: 'NONE'
        }).promise();
        return resource;
    } catch (error) {
        return new Error(error);
    }
}

/**
 * @name setupIntegartionsForAPI
 * @description Integrate API Gateway with Other Resources like LAMDA / OTHER URIU / ETC...
 * @param {string} restApiId - Rest API ID
 * @param {string} resourceId - Rest API Resource ID
 * @param {string} httpMethod - HTTP Method (GET, POST, PUT)
 * @return {object} resource - The api formation response for a particular resource.
 */
const setupIntegartionsForAPI = async (restApiId, resourceId, httpMethod, uri) => {
    try {
        const resource = await APIGATEWAY.putIntegration({
            restApiId,
            resourceId,
            type: 'HTTP',
            httpMethod: httpMethod.toUpperCase(),
            integrationHttpMethod: httpMethod.toUpperCase(),
            uri,
        }).promise();
        return resource;
    } catch (error) {
        return new Error(error);
    }
}

/**
 * @name __createRestApi
 * @description Create REST API WITH aws-sdk
 * @param {string} URI - ARN / URI
 * @param {string} HTTPMETHOD - HTTP Method (GET, POST, PUT)
 * @param {string} PATH - Path of the API
 * @param {string} TYPE - Type of Integaration
 * @param {string} info - API G. Description
 * @return {object} resource - The api formation response for a particular resource.
 */
const __createRestApi = async (URI, HTTPMETHOD, PATH, TYPE = 'HTTP', info) => {
    // const RESTAPIEntity = await createRestAPIEntity({
    //     name: "Simple PetStore (node.js SDK)",
    //     binaryMediaTypes: [
    //         '*'
    //     ],
    //     description: "Demo API created using the AWS SDK for node.js",
    //     version: "0.00.001"
    // });
    // console.log(RESTAPIEntity, ">>>> RESTAPIEntity");
    // const resources = await getRestAPIResources('rwnf2w9y1c');
    // console.log(resources);
    // const pathCreated = await setupPath('rwnf2w9y1c', 'n7oxy6', PATH);
    // console.log(pathCreated);
    // const resp = await createAPIMethod('rwnf2w9y1c', pathCreated.id, 'GET')
    const resp = await setupIntegartionsForAPI('rwnf2w9y1c', '46f40t', HTTPMETHOD, URI);
    console.log(resp, ">>>resp");
    console.log(resp, ">>respo");
}

module.exports = {
    init,
    createRestAPIEntity,
    getRestAPIResources,
    setupPath,
    createAPIMethod,
    setupIntegartionsForAPI,
    __createRestApi,
}