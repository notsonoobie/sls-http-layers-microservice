const AWS = require('aws-sdk');
const { get, chain } = require('lodash');
const APIGATEWAY = new AWS.APIGateway({ apiVersion: '2015/07/09' });

const init = (_awsConfig) => {
    console.log("INITIATING AWS CONFIG FOR KEYS - ", Object.keys(_awsConfig));
    AWS.config.update(_awsConfig);
}

/**
 * @name createRestAPIEntity
 * @description Create REST API Entity - Create REST API Entity - Mostly you won't use this.
 * @return {object} entity - The Entity Response from AWS SDK
 */
const createRestAPIEntity = async ({ name, description, version }) => {
    try {
        const res = await APIGATEWAY.createRestApi({
            name, 
            description,
            version,
            binaryMediaTypes: [
                '*'
            ],
        }).promise();
        return {
            success: true,
            data: res
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}

/**
 * @name deleteRestAPIEntity
 * @description Delete REST API Entity - Create REST API Entity - Mostly you won't use this, this will be used for rollbacks.
 * @param {string} restApiId - Rest API ID
 * @return {object} entity - The Entity Response from AWS SDK
 */
const deleteRestAPIEntity = async (restApiId) => {
    try {
        const res = await APIGATEWAY.deleteRestApi({
            restApiId
        }).promise();
        return {
            success: true,
            data: res
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}

/**
 * @name getRestAPIResources
 * @description Get REST API Entity Resource for a Entity.
 * @return {object} resources - Resources for a particular REST API (ALL APIS AVAILABLE).
 */
const getRestAPIResources = async ({ restApiId, limit = 50, ...filters }) => {
    try {
        const res = await APIGATEWAY.getResources({
            restApiId,
            limit, // Keep limit in concern to handle data safely without timeout issues.
            ...filters
        }).promise();
        return {
            success: true,
            data: res
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}

/**
 * @name getAuthorizers
 * @description Get REST API Entity Resource for a Entity.
 * @return {object} Authorizers - Authorizers for a particular REST API.
 */
const getAuthorizers = async ({ restApiId, limit = 50, ...filters }) => {
    try {
        const res = await APIGATEWAY.getAuthorizers({
            restApiId,
            limit, // Keep limit in concern to handle data safely without timeout issues.
            ...filters
        }).promise();
        return {
            success: true,
            data: res
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}

/**
 * @name createRestAPIResource
 * @description Setup Base API Endpoint - Recursive Strategy
 * @return {object} resource - The resource Response for a Particular Path
 */
const createRestAPIResource = async ({ restApiId, parentId, pathPart }) => {
    try {
        const res = await APIGATEWAY.createResource({
            restApiId,
            parentId,
            pathPart
        }).promise();
        return {
            success: true,
            data: res
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}

/**
 * @name deleteRestAPIResource
 * @description Delete a REST API Resource
 * @return {object} Delete Resource
 */
const deleteRestAPIResource = async ({ restApiId, resourceId }) => {
    try {
        const res = await APIGATEWAY.deleteResource({
            restApiId,
            resourceId
        }).promise();
        return {
            success: true,
            data: res
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}


/**
 * @name puthMethod
 * @description Setup Method for API Endpoint
 * @return {object} resource - The api formation response for a particular resource.
 */
const puthMethod = async ({ restApiId, resourceId, httpMethod, requestValidatorId, authorizerId }) => {
    try {
        const resource = await APIGATEWAY.putMethod({
            restApiId,
            resourceId,
            httpMethod: httpMethod.toUpperCase(),
            authorizationType: authorizerId ? 'CUSTOM' : 'NONE',
            requestValidatorId,
            authorizerId
        }).promise();
        return {
            success: true,
            data: resource
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}

/**
 * @name setupIntegartionsForAPI
 * @description Integrate API Gateway with Other Resources like LAMDA / OTHER URI / ETC...
 * @return {object} resource - The api formation response for a particular resource.
 */
const setupIntegartionsForAPI = async ({ restApiId, resourceId, httpMethod, uri, requestTemplates }) => {
    try {
        const resource = await APIGATEWAY.putIntegration({
            restApiId,
            resourceId,
            type: 'AWS',
            httpMethod: httpMethod.toUpperCase(),
            integrationHttpMethod: httpMethod.toUpperCase(),
            uri: "arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/" + uri, // LAMDA ARN
            passthroughBehavior: "WHEN_NO_TEMPLATES",
            requestTemplates
        }).promise();
         return {
            success: true,
            data: resource
        }
    } catch (error) {
        return {
            success: false,
            message: error.message
        }
    }
}

/**
 * @name __createRestApi
 * @description Create REST API WITH aws-sdk
 * @return {object} resource - The api formation response for a particular resource.
 */
const __createRestApi = async ({ 
    restApiId, 
    parentPathPart, 
    newPath, 
    httpMethod = 'GET', 
    requestValidatorId, 
    lamdaARN = 'arn:aws:lambda:ap-south-1:124263955235:function:sls-http-layers-microservice-auth-dev-register',
    requestTemplates
}) => {
    const [resources, authorizers] = await Promise.all([getRestAPIResources({ restApiId: 'nprjg3tyfl' }), getAuthorizers({ restApiId: 'nprjg3tyfl' })])
    console.log("RESOURCES AVAILABLE >>", JSON.stringify(resources));
    console.log("AUTHORIZERS AVAILABLE >>", JSON.stringify(authorizers));
    if(!resources.success || !authorizers.success) throw new Error('Something went wrong')

    const apiId = chain(resources).get('data.items').find(api => api.pathPart === parentPathPart).get('id').value(); // Get parentPathPart API ID
    if(!apiId) throw new Error('No API Found')
    const authorizerId = get(authorizers, 'data.items.0.id');

    const createdResource = await createRestAPIResource({ restApiId, parentId: apiId, pathPart: newPath })
    console.log("CREATED RESOURCE >>",createdResource);
    if(!createdResource.success) throw new Error('Something went wrong')
    const createdResourceId = get(createdResource, 'data.id');

    const methodIntegartion = await puthMethod({ restApiId, resourceId: createdResourceId, httpMethod, requestValidatorId, authorizerId });
    console.log("METHOD BINDINGS",methodIntegartion);
    if(!methodIntegartion.success){
        await deleteRestAPIResource({ restApiId, resourceId: createdResourceId })
        throw new Error('Something went wrong')
    }

    const integrationResponse = await setupIntegartionsForAPI({
        restApiId,
        resourceId: createdResourceId,
        httpMethod,
        uri: lamdaARN,
        requestTemplates
    })
    console.log(integrationResponse);
    if(!integrationResponse.success){
        throw new Error('Something went wrong')
    }
}

module.exports = {
    init,
    // createRestAPIEntity,
    // getRestAPIResources,
    // setupPath,
    // createAPIMethod,
    // setupIntegartionsForAPI,
    __createRestApi,
}